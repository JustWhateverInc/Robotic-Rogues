<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player_robot_idle</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_robot</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Vars
//Constants
action_timer_set = 20;
action_timer = action_timer_set;

animation_timer_set = 20;
animation_timer = animation_timer_set;

//Instance Specific Properties
device = 0;
color = c_maroon;

//Variables
facing = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Action
if(action_timer &lt;= 0){
    //Init Vars
    action = "idle";
    
    //Input Vars
    var left_axis_h = gamepad_axis_value(device, gp_axislh);
    var left_axis_v = gamepad_axis_value(device, gp_axislv);
    var threshold = .25;
    
    //Control
    var up = false;
    var down = false;
    var left = false;
    var right = false;
    
    //Set Dir and Facing
    var dir = point_direction(0, 0, left_axis_h, left_axis_v);
    if(point_distance(0, 0, left_axis_h, left_axis_v) &gt; threshold){
        var check = round(dir/90) * 90;
        
        //Set Look Dir
        if((check == 360) || (check == 0)){
            right = true;
        } else if(check == 90){
            up = true;
        } else if((check == 180)){
            left = true;
        } else if(check == 270){
            down = true;
        }
    }
    
    //Get Action Based on Facing
    switch(facing){
        case 0: //Right
            if(right){
                action = "move";
            } else if(down){
                action = "clockwise";
            } else if(left){
                action = "u-turn";
            } else if(up){
                action = "counter";
            }
            break;
        
        case 270: //Down
            if(right){
                action = "counter";
            } else if(down){
                action = "move";
            } else if(left){
                action = "clockwise";
            } else if(up){
                action = "u-turn";
            }
            break;
        
        case 180: //Left
            if(right){
                action = "u-turn";
            } else if(down){
                action = "counter";
            } else if(left){
                action = "move";
            } else if(up){
                action = "clockwise";
            }
            break;
        
        case 90: //Up
            if(right){
                action = "clockwise";
            } else if(down){
                action = "u-turn";
            } else if(left){
                action = "counter";
            } else if(up){
                action = "move";
            }
            break;
    }
    
    //Action
    switch(action){
        case "idle":
            //Do Nothing
            break;
            
        case "move":
            //Move
            x += lengthdir_x(64, facing);
            y += lengthdir_y(64, facing);
            
            //Set Animation
            sprite_index = spr_player_robot_move;
            image_index = 0;
            
            //Start Animation Timer
            animation_timer = animation_timer_set;
            break;
            
        case "back":
            //Move
            x += lengthdir_x(-64, facing);
            y += lengthdir_y(-64, facing);
            
            //Set Animation
            sprite_index = spr_player_robot_back;
            image_index = 0;
            
            //Start Animation Timer
            animation_timer = animation_timer_set;
            break;
            
        case "clockwise":
            //Rotate Clockwise
            facing += 270;
            
            //Set Animation
            sprite_index = spr_player_robot_rotate_clockwise;
            image_index = 0;
            
            //Start Animation Timer
            animation_timer = animation_timer_set;
            break;
            
        case "counter":
            //Rotate Counter Clockwise
            facing += 90;
            
            //Set Animation
            sprite_index = spr_player_robot_rotate_counter;
            image_index = 0;
            
            //Start Animation Timer
            animation_timer = animation_timer_set;
            break;
            
        case "u-turn":
            //Make a U-Turn
            facing += 180;
            
            //Set Animation
            sprite_index = spr_player_robot_u_turn;
            image_index = 0;
            
            //Start Animation Timer
            animation_timer = animation_timer_set;
            break;
    }
    
    //Adjust Facing
    if(facing &gt;= 360){
        facing -= 360;
    }
    
    //Start Action Timer
    action_timer = action_timer_set;
    
} else {
    //Reduce Timer
    action_timer--;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Animation
if(animation_timer &gt; 0){
    //Reduce Timer
    animation_timer--;
    
    //Set Sprite and Frame
    if(animation_timer == 0){
        sprite_index = spr_player_robot_idle;
        image_index = 0;
    } else {
        image_index = animation_timer_set - animation_timer;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw Self
draw_sprite_ext(sprite_index, image_index, x, y, 1, 1, facing, color, 1);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///DEBUG
//draw_text(x, y, string(facing));
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
